var ControlPath="controls\\webSocket\\"
var ws = require("nodejs-websocket");

exports.start=function(WebPath,port)
{

    global.webPath=WebPath;
    var Path=global.webPath+"\\"+ControlPath;

    var server=ws.createServer(function(conn){


        //发送消息
        conn.send=function()
        {
            var arr=[];
            for (var i = 0;i < arguments.length;i++)
                arr.push(arguments[i]);
            var data=JSON.stringify(arr);
            this.sendText(data)
        }
        //错误消息
        conn.err=function(msg)
        {
            var arr=["onError",msg];
            var data=JSON.stringify(arr);
            this.sendText(data)
        }
        //广播消息
        conn.broadcast=function() {
            var arr=[];
            for (var i = 0;i < arguments.length;i++)
                arr.push(arguments[i]);

            var data=JSON.stringify(arr);
            server.connections.forEach(function (connection) {
                connection.sendText(data)
            })
        }
        //创建sessionID
        conn.sessionID=parseInt(Math.random()*99999999);
        conn.send("sessionID",conn.sessionID)
        conn.on("text", function (text) {

            try
            {
                var data=JSON.parse(text);
            }
            catch(e)
            {
                console.log("无效的json格式"+text)
            }
            if (data.sessionID!=conn.sessionID)
                return console.log("无效的sessionID"+data.sessionID)
            data.data.splice(0, 0, conn);

            var Control = require(Path+data.action);
            Control["on"].apply(null, data.data);
        })
        conn.on("close", function (code, reason) {
            var Control = require(Path+"onClose");
            if (Control)
                Control.on(conn);
        });
        conn.on("error", function (code, reason) {
            // console.log("an error !",code,reason);
        });
    }).listen(port);



    console.log("webSocket服务启动于"+port+"端口")
}

