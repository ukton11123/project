var ControlPath="controls"
var ViewPath="views";

var mimeTyps=
{
    ".html":"text/html",
    ".txt":"text/html",
    ".xml":"text/xml",
    ".js":"text/javascript",
    ".css":"text/css",
    ".json":"text/css",
    ".plist":"text/css",
    ".exportjson":"text/css",
    ".manifest":"application/x-ms-manifest",
    ".gif":"image/gif",
    ".jpg":"image/jpeg",
    ".png":"image/png",
    ".ico":"image/icon",
    ".swf":"application/x-shockwave-flash",
	".zip":"application/octet-stream",
    ".rar":"application/octet-stream",
    ".wav":"application/octet-stream",
    ".mp3":"application/octet-stream",
    ".exe":"application/octet-stream",

    ".air":"application/octet-stream",
    ".url":"application/octet-stream"



}
var libHttp = require('http'); //HTTP协议模块
var libPath = require('path'); //路径模块
var libFs = require("fs"); //文件系统模块
var func=require('Lib/func');
var arttemplate = require('art-template');
var querystring = require("querystring");
var formidable=require('formidable');
var child_process=require("child_process");

//
//function ejsRender(res,View,Data)
//{
//
//    if (!Data)
//        Data={}
//    Data.filename=View;
//
//    ejs.open = '[[';
//    ejs.close = ']]';
//
//    ejs.renderFile(View,Data, function(err, html)
//    {
//        res.end(html);
//    });
//}
//Web服务器主函数,解析请求
function onRequest(req, res){
    //url重定向
    if (req.headers.host.toLowerCase()=="www.yucool.com.cn")
    {
        res.statusCode = 302;
        res.setHeader("Location", "http://www.yucool.com.cn:81");
        res.end()
        return;
    }


    //创建客户端类
    var _client=new client()
    _client.req=req;
    _client.res=res;
    //单独处理上传类
    if (req.url.substr(0,8).toLowerCase()=="/upload/" && req.method.toLowerCase() == 'post') {

        var form = new formidable.IncomingForm({uploadDir:global.webPath+"/public/uploads/tmp"});
        //这里formidable会对upload的对象进行解析和处理
        form.parse(req, function(err, fields, files) {

            _client.files=files;
            var Arr = req.url.toString().split("/");
            var  upload = require(global.webPath+"\\"+ControlPath+"\\upload");
            upload[Arr[2]](_client,Arr[3],Arr[4])

        });
        return;
    }


    //处理post数据
    var postData = "";
    req.on("data", function (postDataChunk) {
        postData+=postDataChunk;

    });
    //监听数据完毕事件
    req.on("end", function () {
        if (postData)
            _client.post = querystring.parse(postData);//GET & POST  ////解释表单数据部分{name="zzl",email="zzl@sina.com"}

        //解析url
        //判断是否静态文件
        req.url=decodeURI(req.url);
        if (req.url.indexOf("?")!=-1)
            req.url=req.url.substr(0,req.url.indexOf("?"));

        var ext=libPath.extname(req.url);

        if (ext)
        {
            if (ext==".js" && req.url.substr(0,9).toLowerCase()=="/controls")
                return _client.showErr("404:不支持访问此类型资源"+req.url)
            if (!mimeTyps[ext.toLowerCase()])
                return _client.showErr("404:不支持访问此类型资源"+req.url)
            res.setHeader("Content-Type",mimeTyps[ext.toLowerCase()]);
            // setTimeout(function(){
            _client.sendFile(req.url);
            //},1000)

            //   var cp = child_process.fork("./Server/node_modules/lib/httpStatic.js");
            //  cp.send({client:_client,filename:req.url,fileType:mimeTyps[ext]});
            //  child_process.exec("",function()
            // {

            // })
            return;
        }


        var Arr = req.url.toString().split("/");
        if (Arr.length<2)
            return;
        res.writeHead(200, {"Content-Type": "text/html"});
        var StarPos=0;
        var ControlName=""; //控制器名称
        var Path=global.webPath+"\\"+ControlPath;
        for (var i=1;i<Arr.length;i++) {
            Path+="\\"+Arr[i];
            ControlName+="/"+Arr[i];
            if (libFs.existsSync(Path))
                StarPos++;
            else
                break;
        }


        if(Arr[StarPos+2])
            var ActionName=Arr[StarPos+2]; //函数名称
        else
            var ActionName="index";
        if(!ControlName)
            ControlName="index";

        var Params=[_client];       //函数参数


        for(var i=StarPos+3;i<Arr.length;i++)
            Params.push(func.escape(Arr[i]));

        if (_client.post)
            for(var i in _client.post)
                Params.push(func.escape(_client.post[i]));

        //分派路由处理

        try
        {
            var Control = require(Path);
        }
        catch (e)
        {
            _client.showErr("404:访问了不存在的模块"+req.url+"<br/>"+e)
        }
        try {
            // setTimeout(function() {
            Control[ActionName].apply(null, Params);
            //  },1000);
        }
        catch (e)
        {
            _client.showErr("405:模块处理出错"+req.url+"<br/>"+e)
        }
    });
}
exports.start=function(WebPath,Port)
{

    global.webPath=WebPath;

    var AutoReload = require("lib/AutoReload");//热更新模块
    AutoReload.start(WebPath+"\\"+ControlPath+"\\");

//创建一个http服务器 
    var webSvr=libHttp.createServer(onRequest);
//开始侦听端口
    webSvr.listen(Port);
    webSvr.on("error",function(err)
    {
        if (err.code=="EADDRINUSE")
            console.log("http服务启动失败,可能"+Port+"端口被占用");
    })
    console.log("http服务启动于"+Port+"端口")

}



exports.client=client;
function client(){
    this.req;
    this.res;
    this.data={};
    this.viewCache = function(value){
        arttemplate.config("cache",value)
    }
    this.render = function(View){
        this.viewCache(false)
        View=global.webPath+"\\"+ViewPath+"\\"+View;

        if(arguments.length>1)
            var html=arttemplate(View,arguments[1])
        else
            var html=arttemplate(View,this)

        this.res.end(html);
    }
//    this.renderJade=function(View)
//    {
//
//        var jade=require('jade');
//        var _client=this
//        View=global.webPath+"\\"+ViewPath+"\\"+View+".jade";
//
//        jade.renderFile(View,_client,function(err,html){
//            _client.res.end(html);
//        })
//    }
    this.getSession=function(name)
    {
        var Cookies={}
        if (!this.req.headers.cookie)
        return "";
        var cookieArr=this.req.headers.cookie.split(';')
        for (var i in cookieArr)
        {
            var parts = cookieArr[i].split('=');
            Cookies[ parts[ 0 ].trim() ] = ( parts[ 1 ] || '' ).trim();
        };
        this[name]=Cookies[name];
        return Cookies[name];
    }
    this.setSession=function(data)
    {
        this.res.writeHead(200, data);
    }
    this.showErr=function(Text)
    {
        this.res.write('<html><head><meta charset="utf-8"/></head><body>');
        this.res.write('<h3>'+Text+'</h3>');
        this.res.end('</body></html>');
        func.log(Text);
    }
    //返回静态文件
    this.sendFile=function (fileName)
    {
        var _client=this;

        var FullPath=global.webPath+fileName;

        libFs.exists(FullPath,function(exists){
            if (!exists)
                return _client.showErr("404:访问了不存在的资源"+FullPath)


            //创建只读流用于返回
            libFs.readFile(FullPath, "binary", function (err, file) {
                if(err)
                    return _client.showErr("404:资源读取失败"+fileName)

                _client.res.setHeader("Content-Length", file.length);

				//console.log("请求文件成功."+fileName);

                //  setTimeout(function()
                // {
                _client.res.write(file, "binary");
                _client.res.end();

                // },3000)


                //
            });
        })
        //var stream = libFs.createReadStream(FullPath, {flags : "r", encoding : null});
        //指定如果流读取错误,返回404错误
        //stream.on("error", function() {


        //连接文件流和http返回流的管道,用于返回实际Web内容
        // stream.pipe(this.res);


    }
    //返回Json数据
    this.send=function()
    {
        if(arguments.length==0)
            return this.res.end();

        var Arr=[];
        for (var i = 0;i < arguments.length;i++)
            Arr.push(arguments[i]);
        var Data=JSON.stringify(Arr);
        this.res.end(Data);
    }

//输出数据
    this.echo=function (Text)
    {
        this.res.write(Text.toString());
    }
//输出数据
    this.end=function (Text)
    {
        this.res.end(Text?Text.toString():"");
    }
//返回错误
    this.error=function (Text)
    {
        this.res.end('{"Type":"Err","Text":"'+Text.toString()+'"}');
    }
//获取IP
    this.IP=function()
    {
        return this.req.headers['x-forwarded-for'] ||
            this.req.connection.remoteAddress ||
            this.req.socket.remoteAddress ||
            this.req.connection.socket.remoteAddress;

    }

}