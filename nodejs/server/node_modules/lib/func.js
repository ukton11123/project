/**
 * Created by Administrator on 2014/10/4 0004.
 */

exports.sleep = function(milliSeconds) {
    var startTime = new Date().getTime();
    while (new Date().getTime() < startTime + milliSeconds)
    {

    };
}

exports.log=function(Msg)
{
    Msg="/////////////////////////////////////////////////////////////////////////////////////////////\n"+Msg+"\n"+now();
    console.log(Msg);
    var fs = require('fs');
    fs.open('./Error.txt', 'a', function opened(err, fd) {
        if (err) { throw err; }
        var writeBuffer = new Buffer(Msg+"\n"),
            bufferPosition = 0,
            bufferLength = writeBuffer.length, filePosition = null;
        fs.write( fd,
            writeBuffer,
            bufferPosition,
            bufferLength,
            filePosition,
            function wrote(err, written) {
                if (err) { throw err; }
            });
    });
}

exports.getIP=function(Fun)
{

    var os = require('os');
    os = require('os');
    child_proc = require('child_process');
    var getIPApp = undefined;
    var matches = [];
    var pmHosts = [];
    var filterRE = undefined;
    var pingResult = null;
    var pmHost = null;
    if ('win32' == os.platform())
    { getIPApp = child_proc.spawn("ipconfig", null);
        // only get the IPv4 address
        filterRE = /\b(IPv4|IP\s)[^:\r\r\n]+:\s+([^\s]+)/g;}
    else {
        return false;
    }getIPApp.on('exit', function (code, signal) {
    matches = pingResult.match(filterRE) || [];
    for (var i = 0; i < matches.length; i++)
    {
        var host = matches[i].split(':')[1];
        // trim the spaces in the string's start/end position.
        host = host.replace(/(^[\s]*)|([\s]*$)/g,"");
        pmHosts.push(host);
    }
    if (pmHosts.length ==1)
        pmHost = pmHosts[0];
    else
    if (pmHosts.length >1)
        pmHost = pmHosts[1];
    _IP=pmHost
    // do other things
    Fun(pmHost);
});
    getIPApp.stdout.on('data', function (data) {
        // get ping result.
        pingResult = pingResult + data.toString();});

}
exports.time=function ()
{
    return parseInt(new Date().getTime()/1000)
}

exports.timeToString=timeToString;
function timeToString (time)
{
    date=new Date(time)
    var year = date.getFullYear();       //年
    var month = date.getMonth() + 1;     //月
    var day = date.getDate();            //日

    var hh = date.getHours();            //时
    var mm = date.getMinutes();          //分

    var clock = year + "-";

    if(month < 10)
        clock += "0";

    clock += month + "-";

    if(day < 10)
        clock += "0";

    clock += day + " ";

    if(hh < 10)
        clock += "0";

    clock += hh + ":";
    if (mm < 10) clock += '0';
    clock += mm;
    return(clock);
}

exports.now=now;
function now()
{
    return timeToString(new Date());
}
exports.agoTime=function(postdate)
{
    var second = 1000;
    var minutes = second*60;
    var hours = minutes*60;
    var days = hours*24;
    var months = days*30;
    var twomonths = days*365;
    var myDate = new Date();
    myDate.setTime(postdate*1000)
    var nowtime = new Date();
    var longtime =nowtime.getTime()- myDate.getTime();
    var showtime = 0;
    if( longtime > months*2 )
    {
        return postdate;
    }
    else if (longtime > months)
    {
        return "1个月前";
    }
    else if (longtime > days*7)
    {
        return ("1周前");
    }
    else if (longtime > days)
    {
        return(Math.floor(longtime/days)+"天前");
    }
    else if ( longtime > hours)
    {
        return(Math.floor(longtime/hours)+"小时前");
    }
    else if (longtime > minutes)
    {
        return(Math.floor(longtime/minutes)+"分钟前");
    }
    else if (longtime > second)
    {
        return(Math.floor(longtime/second)+"秒前");
    }else
    {
        return("刚刚");
    }
}
exports.escape=function(Str)
{
    if (Str==null)
        return "";
    Str=Str.toString();
    Str=Str.replace(/&x;/ig,"/")
    Str=Str.replace(/'/ig,"\'")
    Str=Str.replace(/"/ig,"\"")
    Str=Str.replace(/ select /ig,"")
    Str=Str.replace(/ delete /ig,"")
    Str=Str.replace(/ and /ig,"")
    Str=Str.replace(/ or /ig,"")
    Str=Str.replace(/ insert /ig,"")
    Str=Str.replace(/ exec /ig,"")
    Str=Str.replace(/ update /ig,"")
    return Str
}

exports.MD5=function(Str)
{
    var crypto = require('crypto');
    var md5 = crypto.createHash('md5');
    md5.update(Str);
    Str=md5.digest('hex');
    //if (Short)
    Str=Str.substr(8,16)
    return Str;
}
exports.getRandomArr=function(arr)
{
    var index=parseInt(Math.random()*arr.length);

    return arr[index];
}
exports.download=function(url,fileName,cb)
{

    var http = require('http');
    var fs = require('fs');
    var path = require('path');
    var wOption = {
        flags: 'a',
        encoding: null,
        mode: 0666
    }
    //创建目录
    if (!fs.existsSync(path.dirname(fileName)))
        fs.mkdirSync(path.dirname(fileName));
    var fileWriteStream = fs.createWriteStream(fileName,wOption);
    http.get(url, function(res) {
        res.on('data', function(data) {
            fileWriteStream.write(data)

        })
        res.on('end', function() {

            fileWriteStream.end();

            if (cb)
                cb(err);

        });
    }).on('error', function(e) {
        if (cb)
            cb(err);
    });
}
//根据两点获取长度
exports.getLength=function(pos1,pos2)
{
    return Math.sqrt(Math.pow((pos2.y - pos1.y), 2) +Math.pow((pos2.x - pos1.x), 2))
}