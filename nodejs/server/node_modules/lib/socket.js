var net = require('net');
var func=require("./func");

var _IP;
var _ConnectCount=0;
exports.start = function(Port,CreateFlashServer,ServicePath)
{
    //启动自动加载模块进行热更新
    var AutoReload = require("lib/AutoReload");
    AutoReload.start(ServicePath);

    global.ConnList = {};
    //启动策略服务
    if (CreateFlashServer)
    {
        net.createServer(function(sock) {

            sock.on('data', function(data) {

                sock.write("<cross-domain-policy><allow-access-from domain=\"*\" to-ports=\"*\"/></cross-domain-policy>\0");

            });
        }).listen(843);
        console.log('Flash安全策略服务启动与843端口');

    }
    func.getIP(function(ip) {
        _IP=ip;
        console.log("本机IP为:"+_IP)
    });
    global.Server=net.createServer(OnConnect);
    global.Server.listen(Port);



    global.Server.on('close', function (data) {
        func.log('Server被关闭: ' + client);
    });
    global.Server.on('error', function (exc) {
        func.log("Server异常: " + exc);
    });
    function OnConnect(remote) {

        // 我们获得一个连接 - 该连接自动关联一个socket对象
        //为连接分配随机sessionID
        var client=new Client();
        client.remote=remote;
        client.sessionID=parseInt(Math.random()*999999);
        client.data="";
        remote.write("SESSION"+client.sessionID+"\0");
        // 为这个socket实例添加一个"data"事件处理函数
        remote.on('data', function (data) {
            try {

                //断包
                client.data+=data;
                if (client.data.charAt(client.data.length-1)!="\0")
                    return;
                var Arr = String(client.data).split("\0"); //按照结尾字符分割
                client.data="";
                for (var i in Arr)

                    if (Arr[i]) {

                        if (Arr[i]=="<policy-file-request/>")
                        {
                            console.log("收到Flash策略请求")
                            continue;
                        }
                        var Data = JSON.parse(Arr[i]);

                        if (Data.action=="name")
                        {
                            client.setName(Data.name);
                            continue;
                        }

                        //检测sessionID是否合法
                        if (Data.sessionID!=client.sessionID)
                        {
                            console.log("非法Session")
                            continue;
                        }

                        if (!Data.data)
                            Data.data=[];

                        //防注入转义
                        for (var i in Data.data)
                            Data.data[i]=func.escape(Data.data[i]);

                        Data.data.splice(0,0,client)
                        var Service=require(ServicePath+Data.action);
                        //分配给相应的模块处理
                        Service.OnData.apply(null,Data.data);
                    }

            }
            catch (err) {
                if (Data)
                    func.log('处理'+Data.action+'数据时发生错误' + err+"\n"+String(data));
                else
                    func.log('处理Socket数据时发生错误' + err+"\n"+String(data));
            }

        });

        //为这个socket实例添加一个"close"事件处理函数
        remote.on('close', function () {
            try {

                if (global.ConnList[client.name]==client)
                {
                    global.ConnList[client.name]=null;
                    delete global.ConnList[client.name]
                    var onClose=require(ServicePath+"onClose");
                    onClose.onClose(client)
                }
                client.free()
                client=null;
            }
            catch (err) {
                func.log('释放连接时发生错误' + err);
            }
        });
        remote.on('error', function (exc) {
            //   func.log(client+"连接异常断开: " + exc);
        });


        remote.setTimeout(30000, function() {
          //  func.log('连接连接超时断开');
            if (client)
                remote.end();
        });
    }

    console.log('TCP服务成功启动于端口'+Port);


}

function Client(){
    this.remote
    this.data=""
    this.sessionID
    this.name

    this.send=function(Action){
        var Arr=[];
        for (var i = 1;i < arguments.length;i++)
            Arr.push(arguments[i]);

        var Data=JSON.stringify(Arr);
        Data='{"action":"'+Action+'","data":'+Data+'}';
        this.remote.write(Data+"\0");
    }
    this.setName=function(name)
    {
        this.name=name;
        global.ConnList[name]=this;
    }
    this.free=function(){
        this.remote.destroy()
        this.remote=null;
    }
}

exports.send=function(name,Action)
{

    if (!global.ConnList)
        return;
    var client=global.ConnList[name];
    if (!client)
        return;

    var Arr=[];
    for (var i = 1;i < arguments.length;i++)
        Arr.push(arguments[i]);
    client.send.apply(client,Arr);
}
exports.sendText=function(name,Text)
{
    if (!global.ConnList[name])
        return;
    global.ConnList[name].remote.write(Text+"\0");
}
exports.clientCount=function(fun)
{

    global.Server.getConnections(function(err,Count){_ConnectCount=Count;})
    return _ConnectCount;
}
exports.port=function()
{
    return global.Server.address().port
}


exports.IP=function()
{
    return _IP
}